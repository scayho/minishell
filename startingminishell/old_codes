// char	*separate_command(char	*str)
// {
// 	static int	i;
// 	char		*lock;
// 	int			quto;
// 	int			dquto;
// 	int			j;

// 	j = i;
// 	quto = 0;
// 	dquto = 0;
// 	while (str[i] != '\0')
//
// 		if (str[i] == 34 || str[i] == 39) // "34 && '39
// 		{
// 			if (str[i] == 34 && dquto == 1)
// 				dquto = 0;
// 			else if (str[i] == 34 && dquto == 0)
// 				dquto = 1;
// 			if (str[i] == 39 && quto == 1)
// 				quto = 0;
// 			else if (str[i] == 39 && quto == 0)
// 				quto = 1;
// 		}
// 		else if (str[i] == 124 && quto == 0 && dquto == 0)
// 		{
// 			lock = ft_substr(str, j, i - j);
// 			i++;
// 			printf("lock >>%s\n", lock);
// 			return (lock);
// 		}
// 		i++;
// 	}
// 	return (ft_substr(str, j, i - j));
// }

// void	tokenizi(t_info *knewledge)
// {
// 	char	*per_command;
// 	int		i;
// 	int		hamza;

// 	hamza = 0;
// 	i = -1;
// 	per_command = separate_command(knewledge->command);
// 	printf(">>%s<<\n", per_command);
// 	hamza = ft_strlen(per_command);
// 	while (ft_strlen(per_command))
// 	{
// 		i++;
// 		knewledge->splited_command[i] = per_command;
// 		per_command = separate_command(knewledge->command);
// 		printf(">>%s<<\n", per_command);
// 		hamza = ft_strlen(per_command);
// 		if (!ft_strncmp(knewledge->command + (ft_strlen(knewledge->command) - ft_strlen(per_command)), per_command, ft_strlen(per_command)))
// 			break ;
// 	}
// 	knewledge->splited_command[i] = per_command;
// 	i++;
// 	knewledge->splited_command[i] = NULL;
// 	i = -1;
// 	while (knewledge->splited_command[++i] != NULL)
// 		printf("command number %d has the value ||||||| %s\n", i, knewledge->splited_command[i]);
// }
